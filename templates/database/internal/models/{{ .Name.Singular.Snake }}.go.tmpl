package models

import (
	"time"

	"github.com/bxcodec/faker/v3"
{{- if .HasJSON }}
    "gorm.io/datatypes"
{{ end }}
{{- if .HasDecimal }}
    "github.com/shopspring/decimal"
{{ end }}
)

// {{ .Name.Singular.Title }} ... {{ .Description }}
type {{ .Name.Singular.Title }} struct {
	bun.BaseModel `bun:"table:admin_users,alias:admin_users"`
	ID            uuid.UUID `bun:",pk,type:uuid,nullzero,notnull,default:uuid_generate_v4()"`
	CreatedAt     time.Time `bun:"type:timestamptz,nullzero,notnull,default:current_timestamp"`
	UpdatedAt     time.Time `bun:"type:timestamptz,nullzero,notnull,default:current_timestamp"`
{{- range .Columns}}
{{- if not .Primary }}
    {{ .Name.Default.Title }} {{ .DataType.Default.Title }} `bun:"{{if .Primary }}primaryKey;{{end}}column:{{ .Name.Original }}" json:"{{ .Name.Original }}" faker:"{{ .FakerType }}"`
{{- end }}
{{- end }}
{{- range .Relations}}
{{- if eq .RelationType "belongsTo" }}
    {{ .Name.Default.Title }} {{if .MultipleEntities }}[]{{end}}{{ .Entity.Name.Singular.Title }}
{{- end -}}
{{- end }}
}

// GetFake{{ .Name.Singular.Title }} ... get fake {{ .Name.Singular.Title }} model
func GetFake{{ .Name.Singular.Title }}() (*{{ .Name.Singular.Title }}, error) {
	entity := &{{ .Name.Singular.Title }}{}
	err := faker.FakeData(entity)

	if err != nil {
		return nil, err
	}

	entity.CreatedAt = time.Now()
	entity.UpdatedAt = time.Now()

{{- range .Relations}}
{{- if eq .RelationType "belongsTo" }}
    {{ .Entity.Name.Singular.Camel }}, _ := GetFake{{ .Name.Default.Title }}()
    entity.{{ .Name.Default.Title }} = *{{ .Entity.Name.Singular.Camel }}
{{- end -}}
{{- end }}

	return entity, nil
}
