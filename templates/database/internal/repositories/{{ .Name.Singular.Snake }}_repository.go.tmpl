package repositories

import (
	"context"
	"database/sql"
	"errors"
	"github.com/d78io/redimir-backend/internal/models"
	"github.com/google/uuid"
	"github.com/uptrace/bun"
	"go.uber.org/zap"
)

// {{ .Name.Singular.Title }}RepositoryInterface ...
type {{ .Name.Singular.Title }}RepositoryInterface interface {
	FindByID(ctx context.Context, id uuid.UUID) (*models.{{ .Name.Singular.Title }}, error)
	Get(ctx context.Context, filters *[]Filter, order string, direction string, offset int64, limit int64) (*[]models.{{ .Name.Singular.Title }}, int64, error)
	GetAvailable{{ .Name.Singular.Title }}s(ctx context.Context, filters *[]Filter, order string, direction string, offset int64, limit int64) (*[]models.{{ .Name.Singular.Title }}, int64, error)
	Save(ctx context.Context, model models.{{ .Name.Singular.Title }}) (*models.{{ .Name.Singular.Title }}, error)
	Delete(ctx context.Context, id uuid.UUID) error
}

// {{ .Name.Singular.Title }}Repository ...
type {{ .Name.Singular.Title }}Repository struct {
	logger   *zap.Logger
	database *bun.DB
}

func (repository *{{ .Name.Singular.Title }}Repository) FindByID(ctx context.Context, id uuid.UUID) (*models.{{ .Name.Singular.Title }}, error) {
	var model models.{{ .Name.Singular.Title }}

	q := repository.database.
		NewSelect().
		Model(&model).
		Where("? = ?", bun.Ident("{{ .Name.Plural.Snake }}.id"), id)
	err := q.Scan(ctx)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, nil
		}
		return nil, err
	}

	return &model, nil
}

// Get ... Get {{ .Name.Singular.Title }} List
func (repository *{{ .Name.Singular.Title }}Repository) Get(ctx context.Context, filters *[]Filter, order string, direction string, offset int64, limit int64) (*[]models.{{ .Name.Singular.Title }}, int64, error) {
	_models := &[]models.{{ .Name.Singular.Title }}{}
	if direction != "desc" {
		direction = "asc"
	}
	q := repository.database.
		NewSelect().
		Model(_models)
	if filters != nil {
		q = ApplyFilters("{{ .Name.Plural.Snake }}", q, *filters)
	}

	q = q.Limit(int(limit)).Offset(int(offset)).Order(order + " " + direction)
	count, err := q.ScanAndCount(ctx)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, 0, nil
		}
		return nil, 0, err
	}

	return _models, int64(count), nil
}

// GetAvailable{{ .Name.Singular.Title }}s ... Get {{ .Name.Singular.Title }} List
func (repository *{{ .Name.Singular.Title }}Repository) GetAvailable{{ .Name.Singular.Title }}s(ctx context.Context, filters *[]Filter, order string, direction string, offset int64, limit int64) (*[]models.{{ .Name.Singular.Title }}, int64, error) {
	_models := &[]models.{{ .Name.Singular.Title }}{}
	if direction != "desc" {
		direction = "asc"
	}
	q := repository.database.
		NewSelect().
		Model(_models)
	q = WhereCurrentlyAvailable("{{ .Name.Plural.Snake }}", q)
	if filters != nil {
		q = ApplyFilters("{{ .Name.Plural.Snake }}", q, *filters)
	}

	q = q.Limit(int(limit)).Offset(int(offset)).Order(order + " " + direction)
	count, err := q.ScanAndCount(ctx)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, 0, nil
		}
		return nil, 0, err
	}

	return _models, int64(count), nil

}

// Save ... Save {{ .Name.Singular.Title }}
func (repository *{{ .Name.Singular.Title }}Repository) Save(ctx context.Context, model models.{{ .Name.Singular.Title }}) (*models.{{ .Name.Singular.Title }}, error) {
	if model.ID == uuid.Nil {
		_, err := repository.database.NewInsert().Model(&model).Returning("*").Exec(ctx)
		if err != nil {
			return nil, err
		}
	} else {
		_, err := repository.database.NewUpdate().Model(&model).Returning("*").Exec(ctx)
		if err != nil {
			return nil, err
		}
	}
	return &model, nil
}

func (repository *{{ .Name.Singular.Title }}Repository) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := repository.database.NewDelete().
		Where("? = ?", bun.Ident("{{ .Name.Plural.Snake }}.id"), id).Exec(ctx)

	if err != nil {
		return err
	}
	return nil
}

// New{{ .Name.Singular.Title }}Repository ... Create new repository
func New{{ .Name.Singular.Title }}Repository(logger *zap.Logger, database *bun.DB) {{ .Name.Singular.Title }}RepositoryInterface {
	return &{{ .Name.Singular.Title }}Repository{logger: logger, database: database}
}
