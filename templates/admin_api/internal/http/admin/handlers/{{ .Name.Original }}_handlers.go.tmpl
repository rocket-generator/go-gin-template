package handlers

import (
	"{{ .OrganizationName }}/internal/http/admin/requests"
	adminResponse "{{ .OrganizationName }}/internal/http/admin/responses"
	commonResponse "{{ .OrganizationName }}/internal/http/common/responses"
	"{{ .OrganizationName }}/internal/models"
	"github.com/google/uuid"
	"go.uber.org/zap"
	"strconv"
	"strings"

	"github.com/gin-gonic/gin"
	"net/http"
)

// {{ .Name.Plural.Title }}Get ... endpoint for GET /{{ .Name.Original }}
func (handler *Handler) {{ .Name.Plural.Title }}Get(ctx *gin.Context) {
	// http://my.api.url/posts?_sort=title&_order=ASC&_start=0&_end=24&title=bar
	offset, err := strconv.Atoi(ctx.DefaultQuery("_start", "0"))
	if err != nil || offset < 0 {
		offset = 0
	}
	end, err := strconv.Atoi(ctx.DefaultQuery("_end", "20"))
	if err != nil || end < 0 {
		end = 20
	}
	limit := end - offset
	if err != nil || limit < 1 || limit > 100 {
		limit = 20
	}
	order := strings.ToLower(ctx.DefaultQuery("_sort", "id"))
	direction := strings.ToLower(ctx.DefaultQuery("_order", "ASC"))
	if err != nil {
		handler.logger.Error("Error parsing sort", zap.Error(err))
		order = "id"
		direction = "asc"
	}
	found := false
	for _, column := range []string{
		"id",
		"email",
	} {
		if column == order {
			found = true
		}
	}
	if !found {
		order = "id"
	}

	data, count, err := handler.{{ .Name.Singular.Camel }}Repository.Get(
		ctx,
		nil,
		order,
		direction,
		int64(offset),
		int64(limit),
	)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, commonResponse.NewInternalServerError(err))
		return
	}

	ctx.Writer.Header().Set("X-Total-Count", strconv.FormatInt(count, 10))

	response := adminResponse.New{{ .Name.Plural.Title }}(data)
	ctx.JSON(http.StatusOK, response)
}

// {{ .Name.Singular.Title }}Get ... endpoint for GET /{{ .Name.Original }}/{id}
func (handler *Handler) {{ .Name.Singular.Title }}Get(ctx *gin.Context) {

	idString := ctx.Param("id")
	id, err := uuid.Parse(idString)
	if err != nil {
		ctx.JSON(http.StatusBadRequest, commonResponse.NewInternalServerError(err))
		return
	}
	model, err := handler.{{ .Name.Singular.Camel }}Repository.FindByID(ctx, id)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, commonResponse.NewInternalServerError(err))
		return
	}
	response := adminResponse.New{{ .Name.Singular.Title }}(*model)
	ctx.JSON(http.StatusOK, response)
}

// {{ .Name.Plural.Title }}Post ... endpoint for POST /{{ .Name.Original }}
func (handler *Handler) {{ .Name.Plural.Title }}Post(ctx *gin.Context) {
	var request requests.{{ .Name.Singular.Title }}Create
	if err := ctx.Bind(&request); err != nil {
		ctx.JSON(http.StatusBadRequest, commonResponse.NewInvalidParameterErrorStatus(err))
		return
	}
	model := models.{{ .Name.Singular.Title }}{
{{- range .Columns }}
{{ if .APIUpdatable }}    {{.Name.Default.Title}}: request.{{.Name.Default.Title}},{{ end -}}
{{ end }}
	}
	resultModel, err := handler.{{ .Name.Singular.Camel }}Repository.Save(ctx, model)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, commonResponse.NewInternalServerError(err))
		return
	}
	response := adminResponse.New{{ .Name.Singular.Title }}(*resultModel)
	ctx.JSON(http.StatusCreated, response)
}

// {{ .Name.Singular.Title }}Put ... endpoint for PUT /{{ .Name.Original }}/{id}
func (handler *Handler) {{ .Name.Singular.Title }}Put(ctx *gin.Context) {
	idString := ctx.Param("id")
	id, err := uuid.Parse(idString)
	if err != nil {
		ctx.JSON(http.StatusBadRequest, commonResponse.NewInternalServerError(err))
		return
	}
	model, err := handler.{{ .Name.Singular.Camel }}Repository.FindByID(ctx, id)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, commonResponse.NewInternalServerError(err))
		return
	}
	var update requests.{{ .Name.Singular.Title }}Update
	if err := ctx.Bind(&update); err != nil {
		ctx.JSON(http.StatusBadRequest, commonResponse.NewInvalidParameterErrorStatus(err))
		return
	}

{{- range .Columns }}
{{- if .APIUpdatable }}
	if update.{{.Name.Default.Title}} != nil {
		model.{{.Name.Default.Title}} = *update.{{.Name.Default.Title}}
	}
{{- end }}
{{- end }}

	resultModel, err := handler.{{ .Name.Singular.Camel }}Repository.Save(ctx, *model)
    if err != nil {
		ctx.JSON(http.StatusInternalServerError, commonResponse.NewInternalServerError(err))
		return
	}
	response := adminResponse.New{{ .Name.Singular.Title }}(*resultModel)
	ctx.JSON(http.StatusCreated, response)
}

// {{ .Name.Singular.Title }}Delete ... endpoint for DELETE /{{ .Name.Original }}/{id}
func (handler *Handler) {{ .Name.Singular.Title }}Delete(ctx *gin.Context) {
	idString := ctx.Param("id")
	id, err := uuid.Parse(idString)
	if err != nil {
		ctx.JSON(http.StatusBadRequest, commonResponse.NewInternalServerError(err))
		return
	}
	_, err = handler.{{ .Name.Singular.Camel }}Repository.FindByID(ctx, id)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, commonResponse.NewInternalServerError(err))
		return
	}

	err = handler.{{ .Name.Singular.Camel }}Service.Delete{{ .Name.Singular.Title }}(ctx, id)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, commonResponse.NewInternalServerError(err))
		return
	}
	response := commonResponse.NewSuccessStatus()
	ctx.JSON(http.StatusOK, response)
}
